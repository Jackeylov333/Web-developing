{"ast":null,"code":"var _jsxFileName = \"D:\\\\Desktop\\\\web\\\\todo-list\\\\Web-developing\\\\client\\\\src\\\\components\\\\Comments.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport socketIO from \"socket.io-client\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = socketIO.connect(\"http://localhost:4000\");\nconst Comments = () => {\n  _s();\n  const {\n    category,\n    id\n  } = useParams();\n  const [comment, setComment] = useState(\"\");\n  const [commentList, setCommentList] = useState([]);\n  const addComment = e => {\n    e.preventDefault();\n    /*\r\n    👇🏻 sends the comment, the task category, item's id and the userID.\r\n     */\n    socket.emit(\"addComment\", {\n      comment,\n      category,\n      id,\n      userId: localStorage.getItem(\"userId\")\n    });\n    setComment(\"\");\n  };\n  useEffect(() => {\n    socket.on(\"comments\", data => setCommentList(data));\n  }, []);\n  useEffect(() => {\n    socket.emit(\"fetchComments\", {\n      category,\n      id\n    });\n  }, [category, id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments__container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"comment__form\",\n      onSubmit: addComment,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"comment\",\n        children: \"Add a comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Type your comment...\",\n        value: comment,\n        onChange: e => setComment(e.target.value),\n        rows: 5,\n        id: \"comment\",\n        name: \"comment\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"commentBtn\",\n        children: \"ADD COMMENT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments__section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Existing Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), commentList.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontWeight: \"bold\"\n            },\n            children: [comment.text, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 29\n          }, this), \"by\", \" \", comment.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this)\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_s(Comments, \"eyEjw80DXu2bTXgSU5nJrmZnO+U=\", false, function () {\n  return [useParams];\n});\n_c = Comments;\nexport default Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["React","useEffect","useState","socketIO","useParams","jsxDEV","_jsxDEV","socket","connect","Comments","_s","category","id","comment","setComment","commentList","setCommentList","addComment","e","preventDefault","emit","userId","localStorage","getItem","on","data","className","children","onSubmit","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","target","rows","name","required","map","style","fontWeight","text","_c","$RefreshReg$"],"sources":["D:/Desktop/web/todo-list/Web-developing/client/src/components/Comments.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport socketIO from \"socket.io-client\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst socket = socketIO.connect(\"http://localhost:4000\");\r\n\r\nconst Comments = () => {\r\n    const { category, id } = useParams();\r\n    const [comment, setComment] = useState(\"\");\r\n    const [commentList, setCommentList] = useState([]);\r\n\r\n    const addComment = (e) => {\r\n        e.preventDefault();\r\n        /*\r\n        👇🏻 sends the comment, the task category, item's id and the userID.\r\n         */\r\n        socket.emit(\"addComment\", {\r\n            comment,\r\n            category,\r\n            id,\r\n            userId: localStorage.getItem(\"userId\"),\r\n        });\r\n        setComment(\"\");\r\n    };\r\n    useEffect(() => {\r\n        socket.on(\"comments\", (data) => setCommentList(data));\r\n    }, []);\r\n    useEffect(() => {\r\n        socket.emit(\"fetchComments\", { category, id });\r\n    }, [category, id]);\r\n\r\n    return (\r\n        <div className='comments__container'>\r\n            <form className='comment__form' onSubmit={addComment}>\r\n                <label htmlFor='comment'>Add a comment</label>\r\n                <textarea\r\n                    placeholder='Type your comment...'\r\n                    value={comment}\r\n                    onChange={(e) => setComment(e.target.value)}\r\n                    rows={5}\r\n                    id='comment'\r\n                    name='comment'\r\n                    required\r\n                ></textarea>\r\n                <button className='commentBtn'>ADD COMMENT</button>\r\n            </form>\r\n            <div className='comments__section'>\r\n                <h2>Existing Comments</h2>\r\n                {commentList.map((comment) => (\r\n                    <div key={comment.id}>\r\n                        <p>\r\n                            <span style={{ fontWeight: \"bold\" }}>{comment.text} </span>by{\" \"}\r\n                            {comment.name}\r\n                        </p>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comments;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}